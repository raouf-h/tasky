name: Build & Rollout Tasky

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.go'
      - 'Dockerfile'
      - 'wizexercise.txt'
      - '.github/workflows/deploy.yaml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: wiz-eks
  K8S_NAMESPACE: tasky-app
  DEPLOYMENT_NAME: tasky-app
  CONTAINER_NAME: tasky

jobs:
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.meta.outputs.image_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image tag
        id: meta
        run: echo "image_sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build image
        run: |
          docker build \
            -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.meta.outputs.image_sha }} \
            -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest \
            .

      - name: Push image (SHA)
        run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.meta.outputs.image_sha }}

      - name: Push image (latest)
        run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    name: Patch Deployment in EKS
    needs: build
    # Si ton runner self-hosted a un label custom "bastion-eks", garde-le;
    # sinon, mets seulement "self-hosted".
    runs-on: [self-hosted, bastion-eks]
    env:
      IMAGE_SHA: ${{ needs.build.outputs.image_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Show current context (debug)
        run: |
          kubectl config current-context
          kubectl cluster-info

      - name: Patch deployment image (rolling update)
        run: |
          kubectl -n $K8S_NAMESPACE set image deployment/$DEPLOYMENT_NAME \
            $CONTAINER_NAME=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${IMAGE_SHA} \
            --record

      - name: Wait for rollout
        run: |
          kubectl -n $K8S_NAMESPACE rollout status deployment/$DEPLOYMENT_NAME --timeout=300s
          kubectl -n $K8S_NAMESPACE get pods -o wide


name: Build and Rollout Image Only

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.go'
      - 'Dockerfile'
      - 'wizexercise.txt'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: wiz-eks
  K8S_NAMESPACE: tasky-app
  DEPLOYMENT_NAME: tasky-app
  CONTAINER_NAME: tasky

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Decide image tag (commit SHA)
        id: set-tag
        run: echo "image_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }} .

      - name: Push image
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }}

      - name: Start ECR image scan (AWS native)
        run: |
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --image-id imageTag=${{ steps.set-tag.outputs.image_tag }} || true

  rollout:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      # Sécurité : vérifier que le déploiement existe AVANT de patcher
      - name: Check deployment exists
        id: check
        run: |
          if ! kubectl -n $K8S_NAMESPACE get deployment/$DEPLOYMENT_NAME >/dev/null 2>&1; then
            echo "Deployment $DEPLOYMENT_NAME not found in namespace $K8S_NAMESPACE !" >&2
            exit 1
          fi

      - name: Patch image (rolling update)
        run: |
          kubectl -n $K8S_NAMESPACE set image deployment/$DEPLOYMENT_NAME \
            $CONTAINER_NAME=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ needs.build-push.outputs.image_tag }}

      - name: Wait for rollout to complete
        run: |
          kubectl -n $K8S_NAMESPACE rollout status deployment/$DEPLOYMENT_NAME --timeout=300s

      - name: Show pod images (proof)
        run: |
          echo "=== Pods ==="
          kubectl -n $K8S_NAMESPACE get pods -o wide
          echo
          echo "=== Images ==="
          kubectl -n $K8S_NAMESPACE get pods -o jsonpath='{range .items[*]}{.metadata.name}{" -> "}{range .spec.containers[*]}{.image}{"\n"}{end}{end}'


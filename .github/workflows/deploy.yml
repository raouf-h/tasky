name: Build and Deploy to EKS

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.go'
      - 'Dockerfile'
      - 'wizexercise.txt'
      - 'k8s-manifests/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: wiz-eks
  K8S_NAMESPACE: tasky-app
  DEPLOYMENT_NAME: tasky-app
  CONTAINER_NAME: tasky

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .

      - name: Push image
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Start ECR image scan (AWS native)
        run: |
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --image-id imageTag=${{ github.sha }} || true

      - name: Upload manifests
        uses: actions/upload-artifact@v4
        with:
          name: k8s-manifests
          path: k8s-manifests/

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download manifests
        uses: actions/download-artifact@v4
        with:
          name: k8s-manifests
          path: k8s-manifests/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Create namespace (idempotent)
        run: |
          kubectl apply -f k8s-manifests/namespace.yaml || true

      - name: Apply secret, svc, ingress
        run: |
          kubectl apply -f k8s-manifests/tasky-env-secret.yaml -n $K8S_NAMESPACE || true
          kubectl apply -f k8s-manifests/service.yaml -n $K8S_NAMESPACE || true
          kubectl apply -f k8s-manifests/ingress.yaml -n $K8S_NAMESPACE || true

      - name: Apply deployment (if new)
        run: |
          kubectl apply -f k8s-manifests/deployment.yaml -n $K8S_NAMESPACE || true

      - name: Set new image tag
        run: |
          kubectl -n $K8S_NAMESPACE set image deployment/$DEPLOYMENT_NAME \
            $CONTAINER_NAME=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Wait for rollout
        run: |
          kubectl -n $K8S_NAMESPACE rollout status deployment/$DEPLOYMENT_NAME --timeout=300s
